const { Client, LocalAuth } = require('whatsapp-web.js');
const qrcode = require('qrcode-terminal');
const config = require('./config/config');
const MessageScheduler = require('./services/MessageScheduler');
const ReminderService = require('./services/ReminderService');
const logger = require('./utils/logger');
const recoveryManager = require('./utils/recoveryManager');
const timeManager = require('./utils/timeManager');

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–∞ WhatsApp
const client = new Client({
    authStrategy: new LocalAuth({ clientId: "tauekel-bot" }),
    puppeteer: {
        headless: true,
        args: [
            '--no-sandbox',
            '--disable-setuid-sandbox',
            '--disable-dev-shm-usage',
            '--disable-accelerated-2d-canvas',
            '--disable-gpu',
            '--window-size=1920x1080'
        ]
    }
});

let reminderService;
let messageScheduler;

// –û–±—Ä–∞–±–æ—Ç–∫–∞ QR –∫–æ–¥–∞
client.on('qr', (qr) => {
    qrcode.generate(qr, { small: true });
    logger.log('QR –∫–æ–¥ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω. –û—Ç—Å–∫–∞–Ω–∏—Ä—É–π—Ç–µ –µ–≥–æ –≤ WhatsApp.');
});

// –ü—Ä–∏ —É—Å–ø–µ—à–Ω–æ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏
client.on('ready', async () => {
    logger.log('–ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –ø–æ–¥–∫–ª—é—á–µ–Ω –∫ WhatsApp!');
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–æ–≤
    reminderService = new ReminderService(client, config);
    messageScheduler = new MessageScheduler(client, config);
    
    // –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ—Å–ª–µ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞
    await recoveryManager.handleRestart(client, reminderService);
    
    // –ó–∞–ø—É—Å–∫ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞
    messageScheduler.startScheduling();

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç
    setInterval(() => {
        recoveryManager.saveState({
            lastActiveTime: timeManager.getCurrentTime().toISOString()
        });
    }, 300000);

    // –û—Ç–ø—Ä–∞–≤–∫–∞ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
    await reminderService.sendReminder('custom', `
ü§ñ –ë–æ—Ç-–ø–æ–º–æ—â–Ω–∏–∫ –∑–∞–ø—É—â–µ–Ω!
‚è∞ –¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è: ${timeManager.formatTime(new Date())}
üìÖ –î–∞—Ç–∞: ${timeManager.formatDate(new Date())}

üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:
‚Ä¢ !—Ä–µ–∂–∏–º - –ø–æ–∫–∞–∑–∞—Ç—å —Ä–µ–∂–∏–º –¥–Ω—è
‚Ä¢ !–∑–∞–Ω—è—Ç–∏—è - —Å–ø–∏—Å–æ–∫ –∑–∞–Ω—è—Ç–∏–π
‚Ä¢ !–ø–æ–º–æ—â—å - —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥
‚Ä¢ !–ø—Ä–æ–≥—Ä–µ—Å—Å - —Ä–∞–∑–≤–∏—Ç–∏–µ ${config.baby.name}

üí° –ë–æ—Ç –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
    `);
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–∫–ª—é—á–µ–Ω–∏—è
client.on('disconnected', async (reason) => {
    logger.log(`–ë–æ—Ç –æ—Ç–∫–ª—é—á–µ–Ω: ${reason}`, 'error');
    
    // –ü–æ–ø—ã—Ç–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è
    const recovered = await recoveryManager.handleError(new Error(reason), client);
    if (!recovered) {
        logger.log('–ù–µ —É–¥–∞–ª–æ—Å—å –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ. –¢—Ä–µ–±—É–µ—Ç—Å—è —Ä—É—á–Ω–æ–µ –≤–º–µ—à–∞—Ç–µ–ª—å—Å—Ç–≤–æ.', 'error');
        process.exit(1);
    }
});

// –ó–∞–ø—É—Å–∫ –∫–ª–∏–µ–Ω—Ç–∞
client.initialize().catch(async error => {
    logger.log(`–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏: ${error.message}`, 'error');
    await recoveryManager.handleError(error, client);
}); 