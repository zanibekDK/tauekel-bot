const cron = require('node-cron');

class SleepFeedingTracker {
    constructor(client, config) {
        this.client = client;
        this.config = config;
        this.recipientNumber = config.whatsapp.recipientNumber;
        
        // –ñ—É—Ä–Ω–∞–ª—ã –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è
        this.sleepLog = new Map();
        this.feedingLog = new Map();
    }

    // –ó–∞–ø–∏—Å—å —Å–æ–±—ã—Ç–∏—è —Å–Ω–∞
    async logSleep(type, startTime) {
        const date = new Date().toISOString().split('T')[0];
        if (!this.sleepLog.has(date)) {
            this.sleepLog.set(date, []);
        }
        
        this.sleepLog.get(date).push({
            type,
            startTime,
            timestamp: new Date()
        });
    }

    // –ó–∞–ø–∏—Å—å —Å–æ–±—ã—Ç–∏—è –∫–æ—Ä–º–ª–µ–Ω–∏—è
    async logFeeding(amount, type = 'regular') {
        const date = new Date().toISOString().split('T')[0];
        if (!this.feedingLog.has(date)) {
            this.feedingLog.set(date, []);
        }

        this.feedingLog.get(date).push({
            amount,
            type,
            timestamp: new Date()
        });
    }

    // –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ —Å–ª–µ–¥—É—é—â–µ–º –∫–æ—Ä–º–ª–µ–Ω–∏–∏
    formatNextFeedingMessage() {
        const now = new Date();
        const currentHour = now.getHours();
        const currentMinutes = now.getMinutes();

        // –ü–æ–∏—Å–∫ —Å–ª–µ–¥—É—é—â–µ–≥–æ –∫–æ—Ä–º–ª–µ–Ω–∏—è
        const allFeeds = [
            ...this.config.sleepFeeding.feeding.dailyFeeds,
            ...this.config.sleepFeeding.feeding.nightFeeds
        ].map(time => {
            const [hours, minutes] = time.split(':').map(Number);
            return { hours, minutes };
        });

        const nextFeeding = allFeeds.find(feed => {
            return feed.hours > currentHour || 
                   (feed.hours === currentHour && feed.minutes > currentMinutes);
        });

        return `
üçº –°–ª–µ–¥—É—é—â–µ–µ –∫–æ—Ä–º–ª–µ–Ω–∏–µ:

‚è∞ –í—Ä–µ–º—è: ${nextFeeding ? `${nextFeeding.hours}:${nextFeeding.minutes.toString().padStart(2, '0')}` : '–ù–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–æ'}
üìä –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–π –æ–±—ä–µ–º: ${this.getRecommendedAmount(nextFeeding)}

üí° –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è:
‚Ä¢ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—É —Å–º–µ—Å–∏
‚Ä¢ –ü–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å –º–µ—Å—Ç–æ
‚Ä¢ –°–º–µ–Ω–∏—Ç—å –ø–æ–¥–≥—É–∑–Ω–∏–∫ –ø–µ—Ä–µ–¥ –∫–æ—Ä–º–ª–µ–Ω–∏–µ–º
        `;
    }

    // –ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º–æ–≥–æ –æ–±—ä–µ–º–∞
    getRecommendedAmount(feedingTime) {
        if (!feedingTime) return this.config.sleepFeeding.feeding.portions.day;
        
        const isNightFeeding = feedingTime.hours >= 22 || feedingTime.hours <= 4;
        return isNightFeeding ? 
            this.config.sleepFeeding.feeding.portions.night : 
            this.config.sleepFeeding.feeding.portions.day;
    }

    // –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∑–∞ –¥–µ–Ω—å
    async getDailyStats() {
        const date = new Date().toISOString().split('T')[0];
        const sleepEvents = this.sleepLog.get(date) || [];
        const feedingEvents = this.feedingLog.get(date) || [];

        return `
üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ ${new Date().toLocaleDateString()}:

üò¥ –°–æ–Ω:
${sleepEvents.map(event => `‚Ä¢ ${event.type}: ${this.formatTime(event.timestamp)}`).join('\n')}

üçº –ö–æ—Ä–º–ª–µ–Ω–∏—è:
${feedingEvents.map(event => `‚Ä¢ ${this.formatTime(event.timestamp)}: ${event.amount} –º–ª`).join('\n')}

üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:
‚Ä¢ –ò–Ω—Ç–µ—Ä–≤–∞–ª –º–µ–∂–¥—É –∫–æ—Ä–º–ª–µ–Ω–∏—è–º–∏: ${this.config.sleepFeeding.feeding.frequency}
‚Ä¢ –î–Ω–µ–≤–Ω–æ–π —Å–æ–Ω: 3-4 —Ä–∞–∑–∞ –ø–æ ${this.config.sleepFeeding.sleep.dailyNaps[0].duration}
‚Ä¢ –ù–æ—á–Ω–æ–π —Å–æ–Ω: ${this.config.sleepFeeding.sleep.nightSleep.duration}
        `;
    }

    // –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏
    formatTime(date) {
        return date.toLocaleTimeString('ru-RU', {
            hour: '2-digit',
            minute: '2-digit'
        });
    }

    // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
    setupReminders() {
        // –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ –∫–æ—Ä–º–ª–µ–Ω–∏–∏
        this.config.sleepFeeding.feeding.dailyFeeds.forEach(time => {
            const [hours, minutes] = time.split(':');
            cron.schedule(`${minutes} ${hours} * * *`, () => {
                this.sendFeedingReminder();
            });
        });

        // –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ —Å–Ω–µ
        this.config.sleepFeeding.sleep.dailyNaps.forEach(nap => {
            const [hours, minutes] = nap.time.split(':');
            cron.schedule(`${minutes} ${hours} * * *`, () => {
                this.sendSleepReminder(nap);
            });
        });
    }

    // –û—Ç–ø—Ä–∞–≤–∫–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ –∫–æ—Ä–º–ª–µ–Ω–∏–∏
    async sendFeedingReminder() {
        const message = this.formatNextFeedingMessage();
        await this.sendNotification(message);
    }

    // –û—Ç–ø—Ä–∞–≤–∫–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ —Å–Ω–µ
    async sendSleepReminder(nap) {
        const message = `
üò¥ –í—Ä–µ–º—è –¥–ª—è —Å–Ω–∞!

‚è∞ –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º–∞—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: ${nap.duration}

‚úÖ –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞:
‚Ä¢ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–≥—É–∑–Ω–∏–∫
‚Ä¢ –ó–∞—Ç–µ–º–Ω–∏—Ç—å –∫–æ–º–Ω–∞—Ç—É
‚Ä¢ –í–∫–ª—é—á–∏—Ç—å –±–µ–ª—ã–π —à—É–º
‚Ä¢ –°–æ–∑–¥–∞—Ç—å –∫–æ–º—Ñ–æ—Ä—Ç–Ω—É—é —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—É

üí° –°–ª–µ–¥–∏—Ç—å –∑–∞ –ø—Ä–∏–∑–Ω–∞–∫–∞–º–∏ —É—Å—Ç–∞–ª–æ—Å—Ç–∏:
‚Ä¢ –¢—Ä–µ—Ç –≥–ª–∞–∑–∫–∏
‚Ä¢ –ó–µ–≤–∞–µ—Ç
‚Ä¢ –ö–∞–ø—Ä–∏–∑–Ω–∏—á–∞–µ—Ç
        `;
        await this.sendNotification(message);
    }

    // –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    async sendNotification(message) {
        try {
            await this.client.sendMessage(this.recipientNumber, message);
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:', error);
        }
    }
}

module.exports = SleepFeedingTracker; 