const GenerateAllSchedules = require('../utils/GenerateAllSchedules');
const config = require('../config/config');
const fs = require('fs');
const path = require('path');

async function testGenerate() {
    try {
        console.log('üöÄ –ù–∞—á–∏–Ω–∞–µ–º —Ç–µ—Å—Ç–æ–≤—É—é –≥–µ–Ω–µ—Ä–∞—Ü–∏—é...\n');
        
        const generator = new GenerateAllSchedules("2024-10-29", "–¢–∞—É–µ–∫–µ–ª");
        
        // –¢–µ—Å—Ç–∏—Ä—É–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –≤–æ–∑—Ä–∞—Å—Ç–æ–≤
        const testCases = [
            { date: "2024-10-29", age: { months: 4, days: 0 } },
            { date: "2024-12-29", age: { months: 6, days: 0 } },
            { date: "2025-02-28", age: { months: 8, days: 0 } }
        ];

        for (const test of testCases) {
            console.log(`\nüìã –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –≤–æ–∑—Ä–∞—Å—Ç–∞ ${test.age.months} –º–µ—Å—è—Ü–µ–≤ ${test.age.days} –¥–Ω–µ–π:`);
            
            const schedule = await generator.generateDaySchedule(
                new Date(test.date),
                test.age
            );

            // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ —Ç–µ—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª
            const testDir = path.join(__dirname, '..', 'tests', 'schedules');
            if (!fs.existsSync(testDir)) {
                fs.mkdirSync(testDir, { recursive: true });
            }

            const fileName = `test_${test.age.months}m${test.age.days}d.json`;
            fs.writeFileSync(
                path.join(testDir, fileName),
                JSON.stringify(schedule, null, 2),
                'utf8'
            );

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å
            validateSchedule(schedule, test.age);
        }

        console.log('\n‚ú® –¢–µ—Å—Ç–æ–≤–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!');
        
    } catch (error) {
        console.error('\n‚ùå –û—à–∏–±–∫–∞:', error);
        process.exit(1);
    }
}

function validateSchedule(schedule, age) {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è
    const requiredFields = ['date', 'age', 'schedule', 'recommendations'];
    for (const field of requiredFields) {
        if (!schedule[field]) {
            throw new Error(`–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–µ –ø–æ–ª–µ: ${field}`);
        }
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –ø–æ –≤–æ–∑—Ä–∞—Å—Ç—É
    const events = Object.values(schedule.schedule);
    
    // –ë–∞–∑–æ–≤—ã–µ —Å–æ–±—ã—Ç–∏—è –¥–ª—è –≤—Å–µ—Ö –≤–æ–∑—Ä–∞—Å—Ç–æ–≤
    const baseEvents = ['feeding_prep', 'feeding', 'morning_routine'];
    for (const eventType of baseEvents) {
        if (!events.some(e => e.type === eventType)) {
            console.warn(`‚ö†Ô∏è –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –±–∞–∑–æ–≤–æ–µ —Å–æ–±—ã—Ç–∏–µ: ${eventType}`);
        }
    }

    // –°–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è –ø–æ –≤–æ–∑—Ä–∞—Å—Ç—É
    if (age.months >= 6) {
        if (!events.some(e => e.type === 'solid_food')) {
            console.warn('‚ö†Ô∏è –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –ø—Ä–∏–∫–æ—Ä–º –¥–ª—è –≤–æ–∑—Ä–∞—Å—Ç–∞ 6+ –º–µ—Å—è—Ü–µ–≤');
        }
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–¥–∏—Ä–æ–≤–∫—É —Å–æ–æ–±—â–µ–Ω–∏–π
    events.forEach(event => {
        if (event.message && !isValidUtf8(event.message)) {
            console.warn(`‚ö†Ô∏è –ü—Ä–æ–±–ª–µ–º–∞ —Å –∫–æ–¥–∏—Ä–æ–≤–∫–æ–π –≤ —Å–æ–±—ã—Ç–∏–∏: ${event.title}`);
        }
    });

    console.log(`‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª—è –≤–æ–∑—Ä–∞—Å—Ç–∞ ${age.months}–º ${age.days}–¥ –∑–∞–≤–µ—Ä—à–µ–Ω–∞`);
}

function isValidUtf8(str) {
    try {
        return Buffer.from(str, 'utf8').toString('utf8') === str;
    } catch {
        return false;
    }
}

testGenerate(); 