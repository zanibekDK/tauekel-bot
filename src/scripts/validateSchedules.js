const fs = require('fs');
const path = require('path');
const config = require('../config/config');

async function validateAllSchedules() {
    console.log('üîç –ù–∞—á–∏–Ω–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –≤—Å–µ—Ö —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–π...\n');

    const schedulesDir = path.join(__dirname, '..', 'schedules');
    let totalFiles = 0;
    let validFiles = 0;
    let errors = [];

    // –ü—Ä–æ—Ö–æ–¥–∏–º –ø–æ –≤—Å–µ–º –º–µ—Å—è—Ü–∞–º
    for (let month = 4; month <= 12; month++) {
        const monthDir = path.join(schedulesDir, `month-${month}`);
        if (!fs.existsSync(monthDir)) continue;

        // –ü—Ä–æ—Ö–æ–¥–∏–º –ø–æ –≤—Å–µ–º –Ω–µ–¥–µ–ª—è–º
        const weeks = fs.readdirSync(monthDir);
        for (const week of weeks) {
            const weekDir = path.join(monthDir, week);
            if (!fs.statSync(weekDir).isDirectory()) continue;

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ –¥–Ω–∏
            const days = fs.readdirSync(weekDir).filter(f => f.endsWith('.js'));
            for (const day of days) {
                totalFiles++;
                const filePath = path.join(weekDir, day);
                try {
                    const schedule = require(filePath);
                    validateSchedule(schedule, month);
                    validFiles++;
                } catch (error) {
                    errors.push({
                        file: `month-${month}/${week}/${day}`,
                        error: error.message
                    });
                }
            }
        }
    }

    // –í—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    console.log('\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø—Ä–æ–≤–µ—Ä–∫–∏:');
    console.log(`‚Ä¢ –í—Å–µ–≥–æ —Ñ–∞–π–ª–æ–≤: ${totalFiles}`);
    console.log(`‚Ä¢ –í–∞–ª–∏–¥–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤: ${validFiles}`);
    console.log(`‚Ä¢ –§–∞–π–ª–æ–≤ —Å –æ—à–∏–±–∫–∞–º–∏: ${errors.length}`);

    if (errors.length > 0) {
        console.log('\n‚ùå –ù–∞–π–¥–µ–Ω—ã –æ—à–∏–±–∫–∏:');
        errors.forEach(({file, error}) => {
            console.log(`\n${file}:`);
            console.log(`  ${error}`);
        });
    } else {
        console.log('\n‚úÖ –í—Å–µ —Ñ–∞–π–ª—ã –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã!');
    }
}

function validateSchedule(schedule, month) {
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã
    if (!schedule.date || !schedule.age || !schedule.schedule) {
        throw new Error('–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è');
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–æ–∑—Ä–∞—Å—Ç–∞
    if (schedule.age.months !== month) {
        throw new Error(`–ù–µ—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –≤–æ–∑—Ä–∞—Å—Ç–∞: –æ–∂–∏–¥–∞–µ—Ç—Å—è ${month}, –ø–æ–ª—É—á–µ–Ω–æ ${schedule.age.months}`);
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–±—ã—Ç–∏–π –ø–æ –≤–æ–∑—Ä–∞—Å—Ç—É
    validateAgeSpecificEvents(schedule);
}

function validateAgeSpecificEvents(schedule) {
    const events = Object.values(schedule.schedule);
    const month = schedule.age.months;

    // –ë–∞–∑–æ–≤—ã–µ —Å–æ–±—ã—Ç–∏—è
    const requiredEvents = ['feeding_prep', 'feeding', 'morning_routine'];
    
    // –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–±—ã—Ç–∏—è –ø–æ –≤–æ–∑—Ä–∞—Å—Ç—É
    if (month >= 6) requiredEvents.push('solid_food');
    if (month >= 8) requiredEvents.push('crawling');
    if (month >= 10) requiredEvents.push('walking');

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –≤—Å–µ—Ö –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö —Å–æ–±—ã—Ç–∏–π
    for (const required of requiredEvents) {
        if (!events.some(e => e.type === required)) {
            throw new Error(`–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–µ —Å–æ–±—ã—Ç–∏–µ –¥–ª—è ${month} –º–µ—Å—è—Ü–µ–≤: ${required}`);
        }
    }
}

validateAllSchedules().catch(console.error); 