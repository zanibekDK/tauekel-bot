const fs = require('fs');
const path = require('path');

class ReminderChecker {
    constructor(config) {
        this.config = config;
        this.reminders = new Map();
        this.loadAllReminders();
    }

    // –ó–∞–≥—Ä—É–∑–∫–∞ –≤—Å–µ—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
    loadAllReminders() {
        for (let month = 4; month <= 12; month++) {
            const monthPath = path.join(__dirname, '..', 'schedules', `month-${month}`);
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ –Ω–µ–¥–µ–ª–∏
            for (let week = 1; week <= 4; week++) {
                const weekPath = path.join(monthPath, `week-${week}`);
                
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ –¥–Ω–∏
                for (let day = 1; day <= 7; day++) {
                    const filePath = path.join(weekPath, `day-${day}.js`);
                    if (fs.existsSync(filePath)) {
                        const schedule = require(filePath);
                        this.validateSchedule(schedule, month, week, day);
                    }
                }
            }
        }
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
    validateSchedule(schedule, month, week, day) {
        const requiredReminders = {
            4: [ // 4-–π –º–µ—Å—è—Ü
                'feeding_prep',
                'feeding',
                'morning_routine',
                'activity',
                'sleep_prep',
                'sensory_development',
                'social_development',
                'walk_prep'
            ],
            6: [ // 6-–π –º–µ—Å—è—Ü (–¥–æ–±–∞–≤–ª—è–µ—Ç—Å—è –ø—Ä–∏–∫–æ—Ä–º)
                'feeding_prep',
                'feeding',
                'morning_routine',
                'activity',
                'sleep_prep',
                'sensory_development',
                'social_development',
                'walk_prep',
                'solid_food_prep',
                'solid_food'
            ],
            8: [ // 8-–π –º–µ—Å—è—Ü (–¥–æ–±–∞–≤–ª—è–µ—Ç—Å—è –ø–æ–ª–∑–∞–Ω–∏–µ)
                'feeding_prep',
                'feeding',
                'morning_routine',
                'activity',
                'sleep_prep',
                'sensory_development',
                'social_development',
                'walk_prep',
                'solid_food',
                'crawling_practice'
            ],
            10: [ // 10-–π –º–µ—Å—è—Ü (–¥–æ–±–∞–≤–ª—è–µ—Ç—Å—è —Ö–æ–¥—å–±–∞)
                'feeding_prep',
                'feeding',
                'morning_routine',
                'activity',
                'sleep_prep',
                'sensory_development',
                'social_development',
                'walk_prep',
                'solid_food',
                'walking_practice'
            ],
            12: [ // 12-–π –º–µ—Å—è—Ü (–ø–æ–ª–Ω—ã–π –Ω–∞–±–æ—Ä –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–µ–π)
                'feeding_prep',
                'feeding',
                'morning_routine',
                'activity',
                'sleep_prep',
                'sensory_development',
                'social_development',
                'walk_prep',
                'solid_food',
                'walking_practice',
                'speech_development',
                'social_games'
            ]
        };

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –≤—Å–µ—Ö –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
        const required = requiredReminders[month] || requiredReminders[4];
        const missing = required.filter(type => 
            !Object.values(schedule.schedule).some(event => event.type === type)
        );

        if (missing.length > 0) {
            console.log(`‚ö†Ô∏è –ú–µ—Å—è—Ü ${month}, –Ω–µ–¥–µ–ª—è ${week}, –¥–µ–Ω—å ${day}:`);
            console.log('–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è:', missing.join(', '));
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –≤—Ä–µ–º–µ–Ω–∏
        Object.entries(schedule.schedule).forEach(([time, event]) => {
            if (!this.isValidTime(time)) {
                console.log(`‚ö†Ô∏è –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –≤—Ä–µ–º—è ${time} –¥–ª—è —Å–æ–±—ã—Ç–∏—è ${event.type}`);
            }
        });
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç–∏ –≤—Ä–µ–º–µ–Ω–∏
    isValidTime(time) {
        const [hours, minutes] = time.split(':').map(Number);
        return hours >= 0 && hours < 24 && minutes >= 0 && minutes < 60;
    }

    // –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
    getStatistics() {
        return {
            totalDays: this.reminders.size,
            byMonth: Array.from({ length: 9 }, (_, i) => i + 4).map(month => ({
                month,
                reminders: this.countRemindersForMonth(month)
            }))
        };
    }

    // –ü–æ–¥—Å—á–µ—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –¥–ª—è –º–µ—Å—è—Ü–∞
    countRemindersForMonth(month) {
        let count = 0;
        this.reminders.forEach(schedule => {
            if (schedule.age.months === month) {
                count += Object.keys(schedule.schedule).length;
            }
        });
        return count;
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–ª–Ω–æ—Ç—ã –æ—Ö–≤–∞—Ç–∞
    checkCoverage() {
        console.log('üìä –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ö–≤–∞—Ç–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π:');
        
        const stats = this.getStatistics();
        console.log(`\n–í—Å–µ–≥–æ –¥–Ω–µ–π —Å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è–º–∏: ${stats.totalDays}`);
        
        stats.byMonth.forEach(({ month, reminders }) => {
            console.log(`\n–ú–µ—Å—è—Ü ${month}:`);
            console.log(`–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π: ${reminders}`);
            console.log(`–°—Ä–µ–¥–Ω–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –≤ –¥–µ–Ω—å: ${(reminders / 30).toFixed(1)}`);
        });
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π
    checkSpecialEvents() {
        console.log('\nüéâ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π:');
        
        const specialEvents = [
            { month: 6, event: '–ü–æ–ª–≥–æ–¥–∞' },
            { month: 9, event: '–ü–µ—Ä–≤—ã–µ —à–∞–≥–∏' },
            { month: 12, event: '–ü–µ—Ä–≤—ã–π –≥–æ–¥' }
        ];

        specialEvents.forEach(({ month, event }) => {
            const hasEvent = this.checkEventInMonth(month, event);
            console.log(`${hasEvent ? '‚úÖ' : '‚ùå'} ${event} (${month} –º–µ—Å—è—Ü–µ–≤)`);
        });
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–±—ã—Ç–∏—è –≤ –º–µ—Å—è—Ü–µ
    checkEventInMonth(month, eventName) {
        return Array.from(this.reminders.values()).some(schedule => 
            schedule.age.months === month && 
            Object.values(schedule.schedule).some(event => 
                event.title.toLowerCase().includes(eventName.toLowerCase())
            )
        );
    }
}

// –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ
const checker = new ReminderChecker(require('../config/config'));
checker.checkCoverage();
checker.checkSpecialEvents();

module.exports = ReminderChecker; 