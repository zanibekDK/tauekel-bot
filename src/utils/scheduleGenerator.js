const fs = require('fs');
const path = require('path');

class ScheduleGenerator {
    constructor(startDate, babyName) {
        this.startDate = new Date(startDate);
        this.babyName = babyName;
        this.totalDays = 360;
    }

    // –°–æ–∑–¥–∞–Ω–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –ø–∞–ø–æ–∫
    createFolderStructure() {
        for (let month = 4; month <= 12; month++) {
            const monthFolder = path.join(__dirname, '..', 'schedules', `month-${month}`);
            if (!fs.existsSync(monthFolder)) {
                fs.mkdirSync(monthFolder, { recursive: true });
            }

            for (let week = 1; week <= 4; week++) {
                const weekFolder = path.join(monthFolder, `week-${week}`);
                if (!fs.existsSync(weekFolder)) {
                    fs.mkdirSync(weekFolder);
                }
            }
        }
    }

    // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –≤—Å–µ—Ö —Ñ–∞–π–ª–æ–≤
    generateAllSchedules() {
        this.createFolderStructure();
        let currentDate = new Date(this.startDate);

        for (let day = 0; day < this.totalDays; day++) {
            const age = this.calculateAge(currentDate);
            const schedule = this.generateDaySchedule(currentDate, age);
            this.saveScheduleFile(schedule, age);
            
            currentDate.setDate(currentDate.getDate() + 1);
        }
    }

    // –†–∞—Å—á–µ—Ç –≤–æ–∑—Ä–∞—Å—Ç–∞
    calculateAge(date) {
        const diffTime = Math.abs(date - this.startDate);
        const diffDays = Math.floor(diffTime / (1000 * 60 * 60 * 24));
        return {
            months: 4 + Math.floor(diffDays / 30),
            days: diffDays % 30
        };
    }

    // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –¥–Ω—è
    generateDaySchedule(date, age) {
        const schedule = {
            date: date.toISOString().split('T')[0],
            age: age,
            schedule: this.getDailySchedule(age),
            recommendations: this.getRecommendations(age)
        };

        return schedule;
    }

    // –ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –¥–Ω—è –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –≤–æ–∑—Ä–∞—Å—Ç–∞
    getDailySchedule(age) {
        const templates = require('./messageTemplates');
        const month = age.months;

        const schedule = {
            // –£—Ç—Ä–µ–Ω–Ω–∏–π –±–ª–æ–∫
            "05:55": {
                type: "feeding_prep",
                title: "‚è∞ –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ –∫–æ—Ä–º–ª–µ–Ω–∏—é",
                message: templates.getTemplate(month, 'feeding', 'prep'),
                importance: "high"
            },
            "06:00": {
                type: "feeding",
                title: "üçº –ü–µ—Ä–≤–æ–µ –∫–æ—Ä–º–ª–µ–Ω–∏–µ",
                message: templates.getTemplate(month, 'feeding', 'main'),
                duration: "30"
            },
            "06:45": {
                type: "morning_routine",
                title: "üåü –£—Ç—Ä–µ–Ω–Ω—è—è –≥–∏–º–Ω–∞—Å—Ç–∏–∫–∞",
                message: templates.getTemplate(month, 'activities', 'morning'),
                duration: "15"
            },
            // ... –¥–æ–±–∞–≤–∏—Ç—å –æ—Å—Ç–∞–ª—å–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è –¥–Ω—è
        };

        return this.adjustScheduleForAge(schedule, age);
    }

    // –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è —Å —É—á–µ—Ç–æ–º –≤–æ–∑—Ä–∞—Å—Ç–∞
    adjustScheduleForAge(schedule, age) {
        // –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∏ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –≤–æ–∑—Ä–∞—Å—Ç–æ–≤
        if (age.months >= 6) {
            // –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–∏–∫–æ—Ä–º
            schedule["10:00"] = {
                type: "feeding",
                title: "ü•Ñ –ü–µ—Ä–≤—ã–π –ø—Ä–∏–∫–æ—Ä–º",
                message: this.getFeedingMessage(age),
                importance: "high"
            };
        }

        if (age.months >= 8) {
            // –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª–∑–∞–Ω–∏–µ
            schedule["11:00"] = {
                type: "activity",
                title: "üêõ –ü—Ä–∞–∫—Ç–∏–∫–∞ –ø–æ–ª–∑–∞–Ω–∏—è",
                message: this.getCrawlingMessage(age),
                importance: "medium"
            };
        }

        return schedule;
    }

    // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ñ–∞–π–ª–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
    saveScheduleFile(schedule, age) {
        const month = `month-${age.months}`;
        const week = `week-${Math.floor(age.days / 7) + 1}`;
        const day = `day-${age.days % 7 + 1}`;

        const filePath = path.join(
            __dirname, 
            '..', 
            'schedules', 
            month, 
            week, 
            `${day}.js`
        );

        const fileContent = `// ${this.getDateComment(schedule.date)}
module.exports = ${JSON.stringify(schedule, null, 4)};`;

        fs.writeFileSync(filePath, fileContent);
    }

    // –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è —Å –¥–∞—Ç–æ–π
    getDateComment(date) {
        return `–î–µ–Ω—å –¥–ª—è ${this.babyName} - ${date}`;
    }
}

// –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞
const generator = new ScheduleGenerator("2024-10-29", "–¢–∞—É–µ–∫–µ–ª");
generator.generateAllSchedules();

module.exports = ScheduleGenerator; 