const fs = require('fs');
const path = require('path');
const messageTemplates = require('./messageTemplates');

class GenerateAllSchedules {
    constructor(startDate, babyName) {
        this.startDate = new Date(startDate);
        this.babyName = babyName;
        this.totalDays = 270;
        this.templates = messageTemplates;
    }

    async generateAllSchedules() {
        console.log('üöÄ –ù–∞—á–∏–Ω–∞–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é —Ñ–∞–π–ª–æ–≤...');
        
        // –°–æ–∑–¥–∞–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –ø–∞–ø–æ–∫
        this.createFolderStructure();

        // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ñ–∞–π–ª—ã –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –¥–Ω—è
        let currentDate = new Date(this.startDate);
        for (let day = 0; day < this.totalDays; day++) {
            const age = this.calculateAge(currentDate);
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –º–µ—Å—è—Ü –Ω–µ –ø—Ä–µ–≤—ã—à–∞–µ—Ç 12
            if (age.months > 12) {
                console.log('‚úÖ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ (–¥–æ—Å—Ç–∏–≥–Ω—É—Ç 12-–π –º–µ—Å—è—Ü)');
                break;
            }

            const schedule = await this.generateDaySchedule(currentDate, age);
            await this.saveScheduleFile(schedule, age);
            
            currentDate.setDate(currentDate.getDate() + 1);
            
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
            if (day % 30 === 0) {
                console.log(`üìù –ü—Ä–æ–≥—Ä–µ—Å—Å: ${Math.floor((day / this.totalDays) * 100)}%`);
            }
        }

        console.log('‚ú® –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ñ–∞–π–ª–æ–≤ —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞');
    }

    createFolderStructure() {
        // –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫–∏ —Ç–æ–ª—å–∫–æ –¥–ª—è –º–µ—Å—è—Ü–µ–≤ 4-12
        for (let month = 4; month <= 12; month++) {
            const monthPath = path.join(__dirname, '..', 'schedules', `month-${month}`);
            if (!fs.existsSync(monthPath)) {
                fs.mkdirSync(monthPath, { recursive: true });
            }

            for (let week = 1; week <= 5; week++) {
                const weekPath = path.join(monthPath, `week-${week}`);
                if (!fs.existsSync(weekPath)) {
                    fs.mkdirSync(weekPath);
                }
            }
        }
    }

    calculateAge(date) {
        const diffTime = Math.abs(date - this.startDate);
        const diffDays = Math.floor(diffTime / (1000 * 60 * 60 * 24));
        const months = 4 + Math.floor(diffDays / 30);
        
        // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –º–µ—Å—è—Ü –¥–æ 12
        return {
            months: Math.min(months, 12),
            days: diffDays % 30
        };
    }

    async generateDaySchedule(date, age) {
        const schedule = {
            date: date.toISOString().split('T')[0],
            age: age,
            schedule: this.getDailySchedule(age),
            recommendations: await this.getRecommendations(age),
            specialEvents: this.getSpecialEvents(date, age)
        };

        return schedule;
    }

    getDailySchedule(age) {
        // –ë–∞–∑–æ–≤–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –≤—Å–µ—Ö –≤–æ–∑—Ä–∞—Å—Ç–æ–≤
        const baseSchedule = {
            "05:55": {
                type: "feeding_prep",
                title: "‚è∞ –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ –∫–æ—Ä–º–ª–µ–Ω–∏—é",
                message: this.templates.getTemplate('feeding', 'prep', this.babyName, age),
                importance: "high"
            },
            "06:00": {
                type: "feeding",
                title: "üçº –ü–µ—Ä–≤–æ–µ –∫–æ—Ä–º–ª–µ–Ω–∏–µ",
                message: this.templates.getTemplate('feeding', 'main', this.babyName, age),
                duration: "30"
            },
            "07:00": {
                type: "activity",
                title: "üéØ –£—Ç—Ä–µ–Ω–Ω–∏–µ –∑–∞–Ω—è—Ç–∏—è",
                message: this.templates.getTemplate('activities', 'morning', this.babyName, age),
                duration: "20"
            },
            "08:00": {
                type: "sensory_development",
                title: "üëÄ –°–µ–Ω—Å–æ—Ä–Ω–æ–µ —Ä–∞–∑–≤–∏—Ç–∏–µ",
                message: this.templates.getTemplate('activities', 'sensory', this.babyName, age),
                duration: "15"
            },
            "09:00": {
                type: "social_development",
                title: "üòä –°–æ—Ü–∏–∞–ª—å–Ω–æ–µ —Ä–∞–∑–≤–∏—Ç–∏–µ",
                message: this.templates.getTemplate('activities', 'social', this.babyName, age),
                duration: "15"
            },
            "09:30": {
                type: "walk_prep",
                title: "üå≥ –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ –ø—Ä–æ–≥—É–ª–∫–µ",
                message: this.templates.getTemplate('activities', 'walk_prep', this.babyName, age),
                importance: "high"
            },
            "10:00": {
                type: "sleep_prep",
                title: "üò¥ –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫–æ —Å–Ω—É",
                message: this.templates.getTemplate('sleep', 'prep', this.babyName, age),
                importance: "high"
            }
        };

        return this.adjustScheduleForAge(baseSchedule, age);
    }

    adjustScheduleForAge(schedule, age) {
        // –î–ª—è 6+ –º–µ—Å—è—Ü–µ–≤ –¥–æ–±–∞–≤–ª—è–µ–º –ø—Ä–∏–∫–æ—Ä–º
        if (age.months >= 6) {
            schedule["09:45"] = {
                type: "solid_food_prep",
                title: "ü•Ñ –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ –ø—Ä–∏–∫–æ—Ä–º—É",
                message: this.templates.getTemplate('feeding', 'solid_food_prep', this.babyName, age),
                importance: "high"
            };
            schedule["10:00"] = {
                type: "solid_food",
                title: "ü•Ñ –ü—Ä–∏–∫–æ—Ä–º",
                message: this.templates.getTemplate('feeding', 'solid_food', this.babyName, age),
                importance: "high"
            };
        }

        // –î–ª—è 8+ –º–µ—Å—è—Ü–µ–≤ –¥–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª–∑–∞–Ω–∏–µ
        if (age.months >= 8) {
            schedule["11:00"] = {
                type: "crawling_practice",
                title: "üêõ –ü—Ä–∞–∫—Ç–∏–∫–∞ –ø–æ–ª–∑–∞–Ω–∏—è",
                message: this.templates.getTemplate('activities', 'crawling', this.babyName, age),
                duration: "20"
            };
        }

        // –î–ª—è 10+ –º–µ—Å—è—Ü–µ–≤ –¥–æ–±–∞–≤–ª—è–µ–º —Ö–æ–¥—å–±—É
        if (age.months >= 10) {
            schedule["14:00"] = {
                type: "walking_practice",
                title: "üö∂‚Äç‚ôÇÔ∏è –ü—Ä–∞–∫—Ç–∏–∫–∞ —Ö–æ–¥—å–±—ã",
                message: this.templates.getTemplate('activities', 'walking', this.babyName, age),
                duration: "15"
            };
        }

        // –î–ª—è 12 –º–µ—Å—è—Ü–µ–≤ –¥–æ–±–∞–≤–ª—è–µ–º —Ä–µ—á–µ–≤–æ–µ —Ä–∞–∑–≤–∏—Ç–∏–µ –∏ —Å–æ—Ü–∏–∞–ª—å–Ω—ã–µ –∏–≥—Ä—ã
        if (age.months >= 12) {
            schedule["15:00"] = {
                type: "speech_development",
                title: "üó£ –†–µ—á–µ–≤–æ–µ —Ä–∞–∑–≤–∏—Ç–∏–µ",
                message: this.templates.getTemplate('activities', 'speech', this.babyName, age),
                duration: "15"
            };
            schedule["16:00"] = {
                type: "social_games",
                title: "üë• –°–æ—Ü–∏–∞–ª—å–Ω—ã–µ –∏–≥—Ä—ã",
                message: this.templates.getTemplate('activities', 'social', this.babyName, age),
                duration: "20"
            };
        }

        return schedule;
    }

    async getRecommendations(age) {
        return {
            focus: this.templates.getTemplate('development', 'focus', this.babyName, age),
            activities: this.templates.getTemplate('development', 'activities', this.babyName, age),
            notes: this.templates.getTemplate('development', 'notes', this.babyName, age)
        };
    }

    getSpecialEvents(date, age) {
        const events = [];

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–µ—Å—è—á–Ω—ã–π –¥–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è
        if (date.getDate() === 29) {
            events.push({
                type: "monthly_birthday",
                title: `üéâ ${age.months} –º–µ—Å—è—Ü–µ–≤!`,
                message: this.templates.getTemplate('specialEvents', 'monthlyBirthday', this.babyName, age)
            });
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Å–æ–±—ã–µ —Å–æ–±—ã—Ç–∏—è
        if (age.months === 6) {
            events.push({
                type: "half_year",
                title: "üéà –ü–æ–ª–≥–æ–¥–∞!",
                message: this.templates.getTemplate('specialEvents', 'halfYear', this.babyName, age)
            });
        }

        return events;
    }

    async saveScheduleFile(schedule, age) {
        try {
            const month = `month-${age.months}`;
            const week = `week-${Math.floor(age.days / 7) + 1}`;
            const day = `day-${age.days % 7 + 1}`;

            const filePath = path.join(
                __dirname,
                '..',
                'schedules',
                month,
                week,
                `${day}.js`
            );

            const fileContent = `// –î–µ–Ω—å –¥–ª—è ${this.babyName} - ${schedule.date}
module.exports = ${JSON.stringify(schedule, null, 2)};`;

            fs.writeFileSync(filePath, fileContent);
        } catch (error) {
            console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞ –¥–ª—è –≤–æ–∑—Ä–∞—Å—Ç–∞ ${age.months} –º–µ—Å—è—Ü–µ–≤ ${age.days} –¥–Ω–µ–π:`, error);
        }
    }

    getDateComment(date) {
        return `–î–µ–Ω—å –¥–ª—è ${this.babyName} - ${date}`;
    }
}

module.exports = GenerateAllSchedules; 